ls(4)
ls[1]
ls[2]
ls[[1]]
ls[[2]]
ls()[[2]]
ls()[2]
ls()[4]
ls(); rm(list=ls()[4]); ls()        # 해당 번호의 변수명을 삭제한다.
# 6.1 Vector 1차원 형태의 데이터 --------------------------------------------------------------
c(1:5)
c(1,2,3,4,"5")
vec1 <- c(1:5)
vec1 <- c(1:5); vec1
vec1[3]
vec1[-3]                        # 세번째 요소만 빼고 보여준다.
vec1[1:3]
length(vec1)
vec1[1:(length(vec1))]
vec1[1:(length(vec1)-2)]
vec1[1:length(vec1)]
vec1 <- c(5:10); vec1
vec1[3]                         # 세번째 요소만 보여준다. R에서는 1에서 시작, 타 언어는 0
vec1[-3]                        # 세번째 요소만 빼고 보여준다.
vec1[1:3]                       # 1-3번쨰 요소를 보여준다.
length(vec1)                    # 요소 갯수를 나타낸다.
vec1[1:(length(vec1)-2)]
vec1[1:length(vec1)]
vec1 <- c(1:5); vec1
vec1[3]                         # 세번째 요소만 보여준다. R에서는 1에서 시작, 타 언어는 0
vec1[-3]                        # 세번째 요소만 빼고 보여준다.
vec1[1:3]                       # 1-3번쨰 요소를 보여준다.
length(vec1)                    # 요소 갯수를 나타낸다.
vec1[1:(length(vec1)-2)]
vec1[1:length(vec1)]
vec1[-(1:3)]
vec1[2] <- 6; vec1              # vec1의 두 번째 값을 6으로 변경
vec1[2] <- 6; vec1              # vec1의 두 번째 값을 6으로 변경
vec1 <- c(vec1,7)               # 벡터에 새로운 내용을 추가할 수 있다.
vec1 <- c(vec1,7); vec1         # 벡터에 새로운 내용을 추가할 수 있다.
vec1 <- c(1:5); vec1
vec1[2] <- 6; vec1              # vec1의 두 번째 값을 6으로 변경
vec1 <- c(vec1,7); vec1         # 벡터에 새로운 내용을 추가할 수 있다.
vec1[7] <- 8; vec1
vec1[9] <- 9; vec1
append(vec1,(-7:-1),before=9)
append(vec1,(-7:-1),after=3)
append(vec1,(-7:-1),before=7)
append(vec1,(-7:-1),after=7)
vec1
append(vec1,(-7:-1),before=3)
var1 <- c(1,2,3)
var2 <- c(3,4,5)
var1 + var2
c(1:3)+c(4:6)
c(1,2,3)+1
var1 <- c(1,2,3)
var2 <- c(4,5,6)
var1 + var2
var3 <- c('1','2','3')
var1 + var3
union(var1 + var3)               # 데이터의 형태가 다를 경우 union을 사용해야 한다.
union(var1, var3)               # 데이터의 형태가 다를 경우 union을 사용해야 한다.
var3 <- c('3','4',5)
var1 + var3                      # 다른 형태의 변수는 연산을 할 수 없다.
union(var1, var3)               # 데이터의 형태가 다를 경우 union을 사용해야 한다.
var3 <- c('3','4',5)
union(var1, var3)               # 데이터의 형태가 다를 경우 union을 사용해야 한다.
var4 <- c(1,2,3,4,5)
var1; var4
var1+var4
# = 2,4,6, 5 , 7
var1 - var2
var2 <- c(3,4,5)
var1 - var2
fruits <- c(10,20,30); fruits
names(fruits) <- c('apple','banana','peach'); fruits
fruits <- c(10,20,30); fruits
var5 <- seq(1:6); var5
var6 <- seq(2,-2); var6
var5 <- seq(1,6); var5
var6 <- seq(2,-2); var6
var7 <- seq(1,10, by=2)
var7 <- seq(1,10, by=2); var7
var7 <- seq(1,10,2); var7
var7 <- seq(2,10,2); var7
var7 <- seq(2,10,by=2); var7
odd <- seq(1,10,2)
odd <- seq(1,10,2); odd
var8 <- rep(1:3, 2); var8
var9 <- rep(1:3, each=2); var9
var8 <- rep(1:3, times=2); var8        # rep(x, times) x값을 전체 반복
var9 <- rep(1:3, each=2); var9   # rep(x, each) x값을 각각 반복
length(var1)
nrow(var1)
var1
nrow(var1)
5 %in% even
4 %in% even
# 6.1.6 벡터에 특정 문자의 포함 여부 찾기 -----------------------------------------------------
even
even <- seq(2,10,by=2); even       # seq(from, to, by), by는 증가분 즉, 간격을 의미한다.
odd <- seq(1,10,2); odd
var8 <- rep(1:3, times=2); var8    # rep(x, times) x값을 전체 반복
# 6.1.6 벡터에 특정 문자의 포함 여부 찾기 -----------------------------------------------------
even
5 %in% even
4 %in% even
date4 <- seq(as.Date("2015-01-01"),as.Date("2015-01-31")); date4
date4 <- seq(as.Date("2015-01-01"),as.Date("2015-01-31"),1); date4
date4 <- seq(as.Date("2015-01-01"),as.Date("2015-01-31"),by=1); date4
vec1 <- c('사과','배','감','버섯','고구마'); vec1
vec1[-3]
vec1 <- c('봄','여름','가을','겨울')
vec2 <- c('봄','여름','늦여름','초가을')
union(vec1,vec2)
vec1-vec2
setdiff(vec1,vec2)
interaction(vec1,vec2)
intersect(vec1,vec2)
mat1 <- matrix(c(1,2,3,4)); mat1
mat2 <- matrix(c(1,2,3,4),nrow=2); mat2
mat3 <- matrix(c(1,2,3,4),nrow=2,byrow = T); mat3
mat3[,3]
mat3[,2]
mat3[1,]
mat3[1,2]
rm(list=ls())
mat1 <- matrix(c(1,2,3,4)); mat1                   # Matrix는 기본적으로 열을 기준으로 생성,
mat2 <- matrix(c(1,2,3,4),nrow=2); mat2            # nrow는 행의 개수를 의미, 데이터는 열을 기준으로 먼저 생성된다.
mat3 <- matrix(c(1,2,3,4),nrow=2,byrow = T); mat3  # byrow 옵션을 통해 데이터를 행을 기준으로 생성할 수 있다.
mat2 <- matrix(c(1,2,3,4), nrow=2); mat2             # nrow는 행의 갯수를 의미, 데이터는 열을 기준으로 먼저 생성된다.
mat4 <- matrix(c(1,2,3
,4,5,6
,7,8,9),nrow=3,byrow=T)
mat4 <- matrix(c(1,2,3
,4,5,6
,7,8,9),nrow=3,byrow=T)
,7,8,9),nrow=3,byrow=T); mat4
mat4 <- matrix(seq(1:9),nrow=3,byrow=T); mat4
mat4 <- rbund(mat4,11:13); mat4                      # rbind : 행 추가
mat4 <- rbind(mat4,11:13); mat4                      # rbind : 행 추가
mat4 <- rbind(mat4,10:12); mat4                      # rbind : 행 추가
mat4 <- matrix(seq(1:9),nrow=3,byrow=T); mat4
mat4 <- rbind(mat4,10:12); mat4                      # rbind : 행 추가
mat4 <- cbind(mat4,)
mat4 <- cbind(mat4,13:16); mat4
mat5 <- matrix(c('a','b','c','d'), nrow=2, byrow=T); mat5
mat5 <- cbind(mat5,c('e','f')); mat5
colnames(mat5)<- c('First','Second','Third'); mat5 # colnames <- 열 이름 지정
colnames(mat5) <- c('First','Second','Third'); mat5 # colnames <- 열 이름 지정
rownames(mat5) <- c('name','age'); mat5
# 1.
seasons <- matrix(c('봄','여름','가을','겨울')); seasons
# 1.
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2); seasons
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2, byrow=T); seasons
seasons[,2]
seasons <- rbind(c('초봄','초가을')); seasons
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2, byrow=T); seasons
seasons_2 <- rbind(seasons('초봄','초가을')); seasons_2
seasons_2 <- rbind(seasons,c('초봄','초가을')); seasons_2
seasons_3 <- cbind(seasons2, c('초여름','초겨울','한겨울'); seasons_3
seasons_3 <- cbind(seasons2, c('초여름','초겨울','한겨울')); seasons_3
seasons_3 <- cbind(seasons_2, c('초여름','초겨울','한겨울')); seasons_3
# 1.
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2); seasons
seasons <- matrix(c('봄','여름','가을','겨울'), nrow=2, byrow=T); seasons
seasons[,2]
seasons_2 <- rbind(seasons,c('초봄','초가을')); seasons_2
seasons_3 <- cbind(seasons_2, c('초여름','초겨울','한겨울')); seasons_3
friend <- matrix(c('김영진','임원기','김준호', nrow=3, byrow=T)); friend
friend <- matrix(c('김영진','임원기','김준호'), nrow=3, byrow=T); friend
friend <- matrix(c('김영진','임원기','김준호'), nrow=3, byrow=T); friend
friend <- matrix(c('김영진','임원기','김준호',27,28,30), nrow=3, byrow=T); friend
friend <- matrix(c('김영진','임원기','김준호',27,28,30), nrow=2, byrow=T); friend
friend <- matrix(c('논산','대구','대전',27,28,30), nrow=2, byrow=T); friend
colnames(friend) <- c('김영진','임원기','김준호'); friend
rownames(friend) <- c('출신지','나이'); friend
friend <- cbind(friend,c('장현준',27)); friend
friend <- matrix(c('논산','대구','대전',27,28,30), nrow=2, byrow=T); friend
colnames(friend) <- c('김영진','임원기','김준호'); friend
rownames(friend) <- c('출신지','나이'); friend
friend <- cbind(friend,c('대구',27)); friend
friend <- rbind(friend,c('아파트','아파트','주택','아파트')); friend
friend <- matrix(c('논산','대구','대전',27,28,30), nrow=2, byrow=T); friend
friend <- cbind(friend,c('대구',27)); friend
friend <- rbind(friend,c('아파트','아파트','주택','아파트')); friend
colnames(friend) <- c('김영진','임원기','김준호','장현준'); friend
rownames(friend) <- c('출신지','나이','거주지'); friend
array1 <- array(c(1:12)),dim=c(4,3)); array1
array1 <- array(c(1:12),dim=c(4,3)); array1
array1 <- array(c(1:12), dim=c(4,3), byrow=T); array1                       # 4행 3열의 배열 만들기 dim : 행, 렬, 차원
array2 <- array(c(1:12),dim=c(2,2,3)); array2
array2[1,2,3]
array2[1,,]
rm(list=ls())
list1 <- list(names = "홍길동",
address = '전국',
tell = '010-2345-4567',
age = 300); list1
list1$names
list1[1:2]
list
rbind
list1[4]
list1[[4]]
list1$birth <- '1719-10-23'; list1
list1$names <- c('Seojinsu','James Seo'); list1
list1$birth <- NULL; list1                            # Key값 삭제하기
rm(list=ls())
no <- c(1:4)
name <- c('apple','peach','banana','grape')
price <- c(500,200,100,50)
qty <- c(5,2,4,7)
sales <- data.frame(NO = no,
NAME = name,
PRICE = price,
QTY = qty); sales
df1 <- data.frame(sales2); df1
sales2 <- matrix(c(1,'Apple',500,5,
2,'peach',200,2,
3,'banana',100,4,
4,'grape',50,7), nrow=4, byrow=T)    # 데이터 모양은 같으나 데이터 형태의 차이가 있다.
df1 <- data.frame(sales2); df1
names(df1) <- c('NO','NAME','PRICE','QTY'); df1
sales
sales$NAME
sales[1,3]
sales[1,]
sales[,3]
sales$NAME; class(sales$NAME)
sales[1,]                                               #              1행, 모든열의 값을 출력한다/
sales[1,3]                                              # data.frame의 1행 3열 값을 출력한다.
sales[1,]                                               # data.frame의 1행, 모든열의 값을 출력한다.
sales[,3]                                               # data.frame의 모든 행, 3열의 값을 출력한다.
str(sales)
sales[c(1:3),]
sales[c(1,3),]
sales[,c(1,2)]                                          # data.frame의 모든 행과 1, 2열의 값을 출력한다.
sales[,c(1,4)]                                          # data.frame의 모든 행과 1, 4열의 값을 출력한다.
subset(sales, qty<5)
subset(sales, price>200)
subset(sales, price==200)                                # sales 데이터 프레임에서 price가 200인 obs를 출력한다.
subset(sales, price!=500)                               # sales 데이터 프레임에서 price가 500이 아닌 obs를 출력한다.
subset(sales, price!=500)                               # sales 데이터 프레임에서 price가 500이 아닌 obs를 출력한다.
subset(sales, price!==500)                               # sales 에서 price가 500이 아닌 obs를 출력한다.
subset(sales, price!=500)                               # sales 에서 price가 500이 아닌 obs를 출력한다.
subset(sales, qty<5)                                    # subset(x, condition)
no <- c(1:3)
name <- c('apple','banana','peach')
price <- c(100,200,300)
df1 <- data.frame(NO = no,
NAME = name,
PRICE = price); sales
df1 <- data.frame(NO = no,
NAME = name,
PRICE = price); df1
no <- c(10,20,30)
name <- c('train','car','airplane')
price <- c(1000,2000,3000)
df2 <- data.frame(NO = no,
NAME = name,
PRICE = price); df2
df3 <- cbind(df1,df2); df3
df3 <- cbind(df1,df2); df3
df3$NO
df3$NO; df3[,5]
df4 <- rbind(df1,df2); df4
df1
no <- c(1:3)
name <- c('apple','banana','cherry')
price <- c(300,200,100)
df5 <- data.frame(NO = no,
NAME = name,
PRICE = price); df5
no <- c(10,20,30)
name <- c('apple','cherry','berry')
qty <- c(10,20,30)
df6 <- data.frame(NO = no,
NAME = name,
QTY = qty); df6
df5 <- data.frame( NAME = name,
PRICE = price); df5
name <- c('apple','cherry','berry')
qty <- c(10,20,30)
df6 <- data.frame(NAME = name,
QTY = qty); df6
merge(df5,df6)
name <- c('apple','banana','cherry')
price <- c(300,200,100)
df5 <- data.frame( NAME = name,
PRICE = price); df5
name <- c('apple','cherry','berry')
qty <- c(10,20,30)
df6 <- data.frame(NAME = name,
QTY = qty); df6
merge(df5,df6)
merge(df5,df6, all=T)
cbind(df5, df6)
merge(df5, df6, all.x = df5)
merge(df5, df6, all.x = T)
merge(df5, df6, all.y = T)
new <- data.frame(name="mango",price=400)
df5 <- rbind(df5, new); df5
new <- data.frame(name="mango",price=400)
df5 <- rbind(df5, new); df5
new
df5
name <- c('apple','banana','cherry')
price <- c(300,200,100)
df5 <- data.frame(name = name,
price = price); df5
name <- c('apple','cherry','berry')
qty <- c(10,20,30)
df6 <- data.frame(name = name,
qty = qty); df6
new <- data.frame(name="mango",price=400)
df5 <- rbind(df5, new); df5
df5 <- cbind(df5, data.frame(quantity=c(10,20,30,40,50))); df5
df5
df5 <- rbind(df5, data.frame(name="mango",price=400)); df5
df5 <- cbind(df5, data.frame(quantity=c(10,20,30,40,50))); df5
merge(df5, df6)
merge(df5, df6, all=T)
merge(df5, df6, all.x = T)
merge(df5, df6, all.y = T)
no <- c(1:5)
no <- c(1:5)
name <- c("서진수",'주시현','최경우','이동근','윤정웅')
adress <- c('서울','대전','포항','경주','경기')
tel <- c(111,222,333,444,555)
tel <- c(111,222,333,444,555)
hobby <- c('독서','미술','놀고먹기','먹고놀기','노는애감시하기')
member <- data.frame(NO=no,
NAME=name,
ADDRESS=address,
TEL=tel,
HOBBY=hobby); member
address <- c('서울','대전','포항','경주','경기')
tel <- c(111,222,333,444,555)
hobby <- c('독서','미술','놀고먹기','먹고놀기','노는애감시하기')
member <- data.frame(NO=no,
NAME=name,
ADDRESS=address,
TEL=tel,
HOBBY=hobby); member
member2 <- subset(member, select=c(NO,NAME,TEL)); member2
member3 <- subser(member, selcet= -ADDRESS); member3
member3 <- subser(member, select= -ADDRESS); member3
member3 <- subset(member, select= -ADDRESS); member3
member2 <- subset(member, select=c(NO,NAME,TEL)); member2           # member 데이터에서 NO, NAME, TEL 변수만 추출하기
member3 <- subset(member, select= -TEL); member3                # member 데이터에서 TEL 변수만 빼고 추출하기
colnames(member3) <- c('번호','이름','주소','취미'); member3
# ncol()
ncol(sales)
# nrow
nrow(sales)
# names
names(sales)
# rownames
rownames(sales)
# colnames
colnames(sales)
# dataframe[c(1,3,2,5,4),]
sales
# dataframe[c(1,3,2,4),]
sales[c(1,3,2,4),]
# dataframe[,c(1,3,2,4)]
sales[,c(1,3,2,4)]
# names :
names(sales)
# colnames
colnames(sales)
# ncol() : 열의 개수
ncol(sales)
getwd()
setwd("D:/limworkspace/R_lecture/Part3/data")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
setwd("D:/limworkspace/R_lecture/Part3/data")
factor_test <- read.csv("factor_test.txt")
class(factor_test)
class(factor_test$blood)
as.character(factor_test$blood)
factor(factor_test$blood)
as.character(factor_test$blood)
as.factor(factor_test$blood)
character(factor_test$blood)
character(factor_test$blood)
as.character(factor_test$blood)
str(testfile)
testfile$순위
testfile$이름
testfile$이름
testfile[1,2]
str(testfile)
testfile$이름
testfile[1,3]
testfile[c(1:5),3]
testfile[c(1:5),4]
testfile[,4]
subset(testfile, 점수<45)
subset(testfile, 점수<45 | 성취율>0.80)
subser(testfile, 조!=3)
subseㅅㅅ(testfile, 조!=3)
subset(testfile, 조!=3)
subset(testfile, 조!=3 & 환산점수 < 75)
colnames(testfile$X100점..환산점수) <- "환산점수"
colnames(testfile$X100점..환산점수)
colnames(testfile[,4])
testfile
head(testfile)
View(testfile)
testfile[4]
testfile[,4]
colnames(testfile)
colnames(testfile[[4]])
testfile$X100점..환산점수
colnames(testfile) <- "환산점수"
colnames(testfile)
testfile <- read.csv("학생시험결과_전체점수.csv")
str(testfile)
setwd("D:/limworkspace/R_lecture/Part3")
str(testfile)
colnames(testfile)[4] <- "환산점수"
colnames(testfile)[4]
colnames(member3)
colnames(member3) <- c('번호','이름','주소','취미이'); member3
colnames(member3) <- c('번호','이름','주소','X_DD..취미'); member3
colnames(member3)[4] <- "취미"                                      # 데이터 프레임 임의의 변수명을 선택해 바꾸기
subset(testfile, 조!=3 & 환산점수 < 75)
setwd("D:/limworkspace/R_lecture/Part3/data")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
colnames(testfile)[5] <- "환산점수"
subset(testfile, 점수<45 | 성취율>0.80)
subset(testfile, 조!=3 & 환산점수 < 75)
testfile <- cbind(testfile, data.frame(grade = rep("A","B","C",nrow(testfile)))); testfile
testfile <- cbind(testfile, data.frame(grade = rep("A","B",nrow(testfile)))); testfile
testfile <- cbind(testfile, data.frame(grade = rep(c("A","B","C"),nrow(testfile)))); testfile
setwd("D:/limworkspace/R_lecture/Part3/data")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
testfile <- cbind(testfile, data.frame(grade = rep(c("A","B","C"),nrow(testfile)))); testfile
setwd("D:/limworkspace/R_lecture/Part3/data")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
colnames(testfile)[5] <- "환산점수"
testfile <- cbind(testfile, data.frame(grade = rep(c("A","B","C"),nrow(testfile)))); testfile
testfile2 <- rbind(testfile, data.frame(c(30,"김준호",3,45,57.8,0.50,"A"))); testfile2
c(30,"김준호",3,45,57.8,0.50,"A")
data.frame(c(30,"김준호",3,45,57.8,0.50,"A"))
names(testfile)
colnames(testfile)[7] <- "등급"
testfile2 <- rbind(testfile, data.frame(c(순위=30,
이름="김준호",
조=3,
점수=45,
환산점수=57.8,
성취율=0.50,
등급="A"))); testfile2
subset(testfile, 점수<45 | 성취율>0.80)
testfile <- NULL
setwd("D:/limworkspace/R_lecture/Part3/data")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
colnames(testfile)[5] <- "환산점수"
colnames(testfile)[7] <- "등급"
testfile <- cbind(testfile, data.frame(grade = rep(c("A","B","C"),nrow(testfile)))); testfile
names(testfile)
colnames(testfile)[7] <- "등급"
testfile2 <- rbind(testfile, data.frame(c(순위=30,
이름="김준호",
조=3,
점수=45,
환산점수=57.8,
성취율=0.50,
등급="A"))); testfile2
data.frame(c(순위=30,
이름="김준호",
조=3,
점수=45,
환산점수=57.8,
성취율=0.50,
등급="A"))
View(testfile)
data.frame(c(순위=30,
이름="김준호",
조=3,
점수=45,
환산점수=57.8,
성취율=0.50,
등급="A"))
setwd("D:/limworkspace/R_lecture/Part3/data")
testfile <- read.csv("학생시험결과_전체점수.csv")
setwd("D:/limworkspace/R_lecture/Part3")
colnames(testfile)[5] <- "환산점수"
testfile <- cbind(testfile, data.frame(grade = rep(c("A","B","C"),nrow(testfile)))); testfile
names(testfile)
colnames(testfile)[7] <- "등급"
testfile2 <- rbind(testfile, data.frame(순위=30,
이름="김준호",
조=3,
점수=45,
환산점수=57.8,
성취율=0.50,
등급="A")); testfile2
subset(testfile, 점수<45 | 성취율>0.80)
subset(testfile, 조!=3 & 환산점수 < 75)
