fruits3 <- read.csv("fruits_3.csv"); fruits3
fruits4 <- read.csv("fruits_4.csv"); fruits4
fruits4 <- read.csv("fruits_4.csv", header = F); fruits4               # header가 없을 경우 header = F 옵션을 사용
label <- c('NO','NAME','PRICE','QTY'); label
fruits4 <- read.csv("fruits_4.csv",header = T, col.names = label); fruits4
install.packages("googleVis")
library(googleVis)
install.packages("sqldf")
library(sqldf)
Fruits
write.csv(Fruits,"Fruits_sql.csv", quote = F, row.names = F)                # csv 파일로 저장하기
write.csv(Fruits,"Fruits_sql.csv", quote = F, row.names = F)                # csv 파일로 저장하기
write.csv(Fruits,"Fruits_sql2.csv", quote = T, row.names = F)
fruits_2 <- read.csv.sql("Fruits_sql.csv",
sql = "SELECT * FORM file WHERE year = 2008"); fruits_2
fruits_2 <- read.csv.sql("Fruits_sql.csv",
sql = "SELECT * FROM file WHERE year = 2008"); fruits_2
fruits[,Fruits$Year==2008]
Fruits$Year==2008
fruits[,which(Fruits$Year==2008)]
fruits[,grep(which(Fruits$Year==2008))]
fruits[,which(grep(Fruits$Year==2008))]
grep(Fruits$Year==2008)
fruits[,which(grep(Fruits$Year=='2008'))]
grep(Fruits$Year=='2008')
grep(Fruits$Year=='2008'))
grep(Fruits$Year=='2008')
Fruits[,which(grep(Fruits$Year=='2008'))]
which(Fruits$Year=='2008')
Fruits[,which(Fruits$Year=='2008')]
Fruits[which(Fruits$Year=='2008'),]
Fruits[which(Fruits$Year==2008),]
install.packages("XLConnect")
library(XLConnect)
data1 <- loadWorkbook("fruits_6.xls", create = T)
data2 <- readWorksheet(data1,sheet="sheet1", startRow = 1, endRow=8, startCol = 1, endCol = 5); data2
fruits6 <- read.delim("clipboard",header = T); fruits6
install.packages("readxl")
library(readxl)
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1",
range = "A2:D6",
col_names = T,
col_types = "guess",
na = 'NA'); fruits7
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1",
range = "A2:D6",
col_names = T,
col_types = "guess",
na = 'NA'); fruits7; class(fruits7)
max(vex1)
max(vex2)                                    # 문자에 적용할 때는 '알파벳 순서'
vec1 <- c(1:5); vec1
vec2 <- c('a','b','c'); vec2
max(vex1)
max(vex2)                                    # 문자에 적용할 때는 '알파벳 순서'
max(vec1)
max(vec2)                                    # 문자에 적용할 때는 '알파벳 순서'
mean(vec2)                                   # 문자의 평균은 말이 안됨
min(vec1)
median(vec1)
sum(vec1)
var(vec1)
sd(vec1)
library(googleVis)
# aggregate( 계산이 될 열 ~ 기준이 될 열 , 데이터, 함수 )
str(Fruits)
aggregate(Sales ~ Year, sum)
aggregate(Sales ~ Year, Fruits, sum)
aggregate(Profit ~ Year, Fruits, mean)          # Fruits 데이터의 연도[기준]별 총[함수] 판매량[계산]
aggregate(Sales ~ Year, Fruits, max)
# aggregate( 계산이 될 열 ~ 기준이 될 열 , 데이터, 함수 )
str(Fruits)
Fruits
aggregate(Sales ~ Fruit+Location, Fruits, max)
Fruits$Date <- seq(as.Date("2010-01-01"),as.Date("2018-01-01"),by=year); Fruits$Date
Fruits$Date <- seq(as.Date("2010-01-01"),as.Date("2018-01-01"),by='year'); Fruits$Date
mat1 <- matrix(c(1:6), nrow = 2, byrow = T); mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
apply(mat1, 2, prod)
apply(mat1, 1, prod)
apply(mat1[,c(2,3)])
apply(mat1[,c(2,3)],1 ,sum)
aggregate(Sales ~ Location, Fruits, sum, subset(., Date <= as.Date("2015-01-01")))
aggregate(Sales ~ Location, Fruits, sum, subset(Fruits, Date <= as.Date("2015-01-01")))
aggregate(Sales ~ Location, Fruits, sum, list = subset(Fruits, Date <= as.Date("2015-01-01")))
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
lapply(c(list1,list2), mat)
lapply(c(list1,list2), max)
sapply(c(list1,list2), max)
lapply(c(Fruits[,c(4,5)],max))
lapply(c(Fruits[,c(4,5)]),max)
sapply(c(Fruits[,c(4,5)]),max)
# tapply : Factor 형태를 처리하는 apply 계열의 함수
attach(Fruits)
tapply(Sales, Fruit, sum)
# tapply : Factor 형태를 처리하는 apply 계열의 함수
tapply(Sales, Fruit, sum)
tapply(Sales, Year, sum)
class(tapply(Sales, Year, sum))
vec1
vec2 <- c(10:50,10); vec2
vec2 <- c(10:50,by=10); vec2
vec2 <- sep(10,50,by=10); vec2
vec2 <- seq(10,50,by=10); vec2
vec2 <- seq(10,50, by=10); vec2
vec3 <- seq(100,500, by= 100); vec3
mapply(vec1, vec2 ,vec3)
mapply(sum, vec1, vec2 ,vec3)
rm(list=ls())
data1 <- read.csv("data1.csv")
str(data1)
data1 <- read.csv("data1.csv", header = T)
str(data1)
View(data1)
data1 <- read.csv("data1.csv", header = T, quote = F)
data1 <- read.csv("data1.csv", header = T)
data1 <- read.csv("data1.csv", header = T)
str(data1)
aggregate(. ~ 연령별,sum)
aggregate(. ~ 연령별, data1, sum)
aggregate(. ~ data1$연령별, data1, sum)
aggregate(. ~ 연령별, data1, sum)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
data1 <- read.csv("data1.csv", header = T)
str(data1)
setwd("D:/limworkspace/R_lecture/Part3/data")
aggregate(-연령별 ~ 연령별, data1, sum)
data1 <- read.csv("data1.csv", header = T)
str(data1)
aggregate(-연령별 ~ 연령별, data1, sum)
aggregate(. ~ 연령별 , data1, sum)
apply(data1, 1, sum)
aggregate(. ~ 연도별, data1, sum)
str(data1)
aggregate(. ~ 연령별, data1, sum)
aggregate(. ~ '연령별', data1, sum)
as.matrix(data1)
apply(data1, 1 ,sum)
class(data1)
as.matrix(data1)
apply(as.Matirx(data1), 1 ,sum)
data1 <- as.matrix(data1)
apply(data1, 1 ,sum)
data1 <- read.csv("data1.csv", header = T)
str(data1)
sapply(data1, 1 ,sum)
# 1. 연도별 합계
attach(data1)
apply(data1, 1, sum)
data1 <- read.csv("data1.csv", header = T)
# 연습문제
data1 <- NULL
data1 <- read.csv("data1.csv", header = T)
str(data1)
# 1. 연도별 합계
attach(data1)
# 1. 연도별 합계
attach(data1)
apply(data1, 1, sum)
tapply(.,연령별,sum)
# 연습문제
data1 <- NULL
data1 <- read.csv("data1.csv", header = T)
str(data1)
array(data1[-1,],1,sum)
array(data1[,-연령별],1,sum)
array(data1[,-1],1,sum)
data1
array(data1[,-1],1:5,sum)
ata1[,-1]
data1[,-1]
array(data1[,-1],2,sum)
data1[,-1]
array(data1[,-1], 2, sum)
data1[,-1]
array(data1[,-1], 2, sum)
ncol(data1)
array(data1[,c(2:ncol(data1))], 2, sum)
str(data1)
View(data1)
array(data1, 1, sum)
array(data1[,-1], c(2:c(2:ncol(data1)), sum)
array(data1[,-1], c(2:ncol(data1)), sum)
array(data1[,-1], 2:3), sum)
array(data1[,-1], 2:3), sum))
array(data1[,-1], 2, sum))
array(data1[,-1], 2, sum)
data1[,-1]
array(data1[,-1], c(2,3), sum)
array(data1, 2, sum)
array(data1, 1, sum)
array(data1[,-1], 1, sum)
data1[,-1]
class(data1)
as.matrix.data.frame(data1)
array(data1[,-1], 2, sum)
data1 <- as.matrix.data.frame(data1)
array(data1[,-1], 2, sum)
# 연습문제
data1 <- NULL
data1 <- read.csv("data1.csv", header = T)
str(data1)
sapply(data1[-1,],sum)
# 연습문제
data1 <- NULL
data1 <- read.csv("data1.csv", header = T)
str(data1)
sapply(data1[-1,],sum)
# 1. 연도별 합계
attach(data1)
# 연습문제
data1 <- NULL
data1 <- read.csv("data1.csv", header = T)
str(data1)
# 1. 연도별 합계
sapply(data1[-1,],sum)
matrix(data1)
str(data1)
as.matrix(data1)
str(data1)
data2 <- as.matrix(data1)
str(data1)
str(data2)
apply(data1[-1,],sum)
data2 <- read.csv("1-4호선승하차승객수.csv")
attach(data2)
tapply(승차,노선번호,sum)
# 2.2
tapply(하차, 노선번호, sum)
# 2.3
tapply(하차,, sum)
# 2.3
tapply(하차, sum)
# 2.3
tapply(하차, ., sum)
# 2.3
tapply(. , c(승차,하차), sum)
# 2.3
tapply(, c(승차,하차), sum)
apply(data2[2:3,],sum)
apply(data2[2:3,],2,sum)
apply(data2[2:3,],1,sum)
mapply(sum,data2$승차,data2$하차)
sapply(sum,data2$승차,data2$하차)
sapply(sum,data2[,3],data2[,4])
tapply(data1[,-1],data[,1],sum)
apply(data1[,c(2:10)],1,sum)
apply(data1[c(1:5),],1,sum)
data1 <- read.table("data1.csv", header = T)
str(data1)
apply(data1[c(1:5),],1,sum)
data1 <- read.csv("data1.csv", header = T)
str(data1)
# 2.3
apply(data2,2,sum)
# 2.3
apply(data2[,c(3:4)],2,sum)
# 2.4
str(data2)
aggregate(승차+하차,노선번호,sum)
aggregate(승차+하차 ~ 노선번호,sum)
aggregate(승차 + 하차 ~ 노선번호,sum)
aggregate(승차 + 하차 ~ 노선번호,data2,sum)
# 2.5
aggregate(승차 ~ 노선번호,data2,sum)
# 2.6
aggregate(하차 ~ 노선번호,data2,sum)
aggregate(data1[,-1]~data1[,1],sum)
aggregate(data1[,-1]~data1[,1],data1,sum)
data1[,1]
aggregate(.~연령별,data1,sum)
data1[,-1]
aggregate(data1[,-1]~연령별,data1,sum)
aggregate(data1[,c(2:10)]~연령별,data1,sum)
aggregate(data1$X2000년~연령별,data1,sum)
aggregate(X2000년~연령별,data1,sum)
aggregate(-연령별~연령별,data1,sum)
# 1.1 연도별 합계
apply(data1[,-1],2,sum)
# 1.2 연령대별 합계
apply(data1,1,sum)
# 1.2 연령대별 합계
apply(data1[,-1],1,sum)
# 1.1 연도별 합계
apply(data1[,-1], 2, sum)
detach(data2)
sapply(data2[,c(3:4)],sum)
aggregate(승차 + 하차 ~ 노선번호,data2,sum)  # aggregate(계산될 열 ~ 기준될 열, 데이터, 함수)
# 2.5 노선 번호별 승차 인원수 합
aggregate(승차 ~ 노선번호,data2,sum)
sapply(data2[,c(3:4)],sum)
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],2,sum)
sapply(data2[,c(3:4)],sum)
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],2,sum)
sapply(data2[,c(3:4)],sum)
# 2.3 승차 하차 인원수 합
app <- apply(data2[,c(3:4)],2,sum); class(app)
spp <- sapply(data2[,c(3:4)],sum); class(spp)
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],2,sum)
sapply(data2[,c(3:4)],sum)
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],sum)
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],2,sum)
sapply(data2[,c(3:4)],sum)                   # sapply(데이터, 적용함수)
data2
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],1,sum)
# 2.3 승차 하차 인원수 합
apply(data2[,c(3:4)],2,sum)
mat1 <- matrix(seq(1:6),nrow = 2,byrow = 2); mat1
a <- c(1,1,1); a
mat1 <- matrix(seq(1:6), nrow = 2, byrow = 2); mat1
a <- c(1,1,1); a
sweep(mat1,1,a)
sweep(mat1,2,a)
sweep(mat1,3,a)
sweep(mat1,2,a)
mat1 <- matrix(seq(1:9), nrow = 2, byrow = 2); mat1
a <- c(1,1,1); a
sweep(mat1,3,a)
sweep(mat1,1,a)
mat1 <- matrix(seq(1:9), nrow = 3, byrow = 2); mat1
a <- c(1,1,1); a
sweep(mat1,3,a)
mat1 <- matrix(seq(1:9), nrow = 3, byrow = 2); mat1
a <- c(1,1,1); a
sweep(mat1,3,a)
sweep(mat1,1,a)
sweep(mat1,2,a)
sweep(mat1,1,a)
a <- c(1,1,2); a
sweep(mat1,1,a)
sweep(mat1,2,a)
mat1 <- matrix(seq(1:9), nrow = 3, byrow = 2); mat1
a <- c(1,1,3); a       # 기준에 따라 각각 1,2,3 번째 행(1) 또는 열(2)을 의미
sweep(mat1,2,a)        # sweep(데이터, 방향, 요소)
b <- c(1:5); length(b)
length(Fruits)
abs(1)
log(10)
log10(10)
abs(seq(-3,-1))
a <- c(2.1, 3.3, 2.9); a
ceiling(a)
floor(a)
round(a)
a <- c(2.1, 3.3, 2.9,-2,3,-,5,9)
ceiling(a)                       # 올림
a <- c(2.1, 3.3, 2.9,-2,3,-5.9)
ceiling(a)                       # 올림
floor(a)                         # 내림
round(a)
a <- c(2.1, 3.5, 2.9,-2,3,-5.9)
ceiling(a)                       # 올림
floor(a)                         # 내림
round(a)
a <- c(2.1, 3.5,3.51,3.49 2.9,-2,3,-5.9)
ceiling(a)                       # 올림
a <- c(2.1, 3.5, 3.51, 3.49, 2.9, -2,3, -5.9)
ceiling(a)                       # 올림
floor(a)                         # 내림
round(a)                         # 반올림
a <- c(2.1, 3.51, 3.49, -2.3, -5.9)
ceiling(a)                       # 올림
floor(a)                         # 내림
round(a)                         # 반올림
choose(a)
myfunc <- function() {
return(10)
}; myfunc
myfunc
myfunc <- function() {
return(10)
}
myfunc
myfunc <- function() {
return(10)
}
myfunc
myfunc
myfunc()
myfunc2 <- function(a, b) {
c <- a*b
return(c)
}
myfunc2
myfunc2(2,3)
myfunc2(5,5)
myfunc2 <- function(a, b) {
y <- x*x
return(y)
}
myfunc2(5,5)
myfunc2 <- function(x) {
y <- x*x
return(y)
}
myfunc2(-3)
myfunc3 <- function(a,b) {
y = a-b
return(y)
}
myfunc3(3,2)
myfunc3(2,3)
myfunc4 <- function(a,b) {
y = abs(a-b)
return(y)
}
myfunc4(3,2)
myfunc4(2,3)
sort(seq(1,30),by=5,each=2)
sort(seq(1,30,by=5,each=2))
seq(1,30,by=5,each=2)
sort(seq(1,30,by=5))
sort(seq(1,30,by=5), decreasing = T)
trunc(runif(1,11,99))
BBgame<-function(chance){
cat(" 야구게임을 시작합니다.","\n",
"서로 다른 네 자리 숫자를 입력해 주세요.
(단, 중복숫자는 불가능)","\n","\n")
x<-sample(0:9,4)
for(i in 1:chance){
cat("\n < ",i,"회  >")
n=scan(nmax = 1,quiet = T)
n1<-floor(gn/1000)
n2<-floor((gn%%1000)/100)
n3<-floor((gn%%100)/10)
n4<-gn%%10
full_n <- (x[1]*1000)+(x[2]*100)+(x[3]*10)+(x[4])
s<-0; b<-0
if(x[1]==n1){s=s+1}
if(x[2]==n2){s=s+1}
if(x[3]==n3){s=s+1}
if(x[4]==n4){s=s+1}
if(x[1]==n2){b=b+1}
if(x[1]==n3){b=b+1}
if(x[1]==n4){b=b+1}
if(x[2]==n1){b=b+1}
if(x[2]==n3){b=b+1}
if(x[2]==n4){b=b+1}
if(x[3]==n1){b=b+1}
if(x[3]==n2){b=b+1}
if(x[3]==n4){b=b+1}
if(x[4]==n1){b=b+1}
if(x[4]==n2){b=b+1}
if(x[4]==n3){b=b+1}
cat(s,"스트라이크!!",b,"볼!!","\n","\n")
if(full_n==n){cat("홈~런!! 수고하셨습니다.");break}
}
if(full_n!=n){cat("실패하셨습니다. 재도전 하시겠습니까 ? \n")}
}
BBgame(10)
exfunc1 <- function(a,b) {
y = a-b
return(y)
}
exfunc1(3,2)
exfunc1(2,3)
exfunc2 <- function(a,b) {
y = abs(a-b)
return(y)
}
exfunc2(3,2)
exfunc2(2,3)
exfunc2 <- function(a,b) {
y = abs(exfunc1(a,b))
return(y)
}
exfunc2(3,2)
exfunc2(2,3)
aggregate(Sales ~ Location, Fruits, sum, subset(Fruits, Date <= "2015-01-01"))
aggregate(Sales ~ Location, Fruits, sum, list(subset(Fruits, Date <= "2015-01-01")))
aggregate(Sales ~ Location, Fruits, sum, list(subset(Fruits, Date == "2015-01-01")))
aggregate(Sales ~ Location, Fruits, sum, subset(Fruits, Date == "2015-01-01"))
aggregate(Sales ~ Location, Fruits, sum, list(Fruits$Date <= '2018-01-01'))
aggregate(Sales ~ Location, Fruits, sum, list(Fruits$Date == '2018-01-01'))
aggregate(Sales ~ Location, Fruits, sum, list(Fruits$Date == as.character('2018-01-01')))
class(Fruits$Date)
aggregate(Sales ~ Location, Fruits, sum, list(Fruits$Date == as.Date('2018-01-01')))
Fruits$Date
Fruits$Date <- seq(as.Date("2010-01-01"),as.Date("2018-01-01"),by='year'); Fruits$Date
class(Fruits$Date)
aggregate(Sales ~ Location, Fruits, sum, list(Fruits$Date == as.Date('2018-01-01')))
Fruits$Date <= '2015-01-01'
which(Fruits$Date <= '2015-01-01')
which(Fruits$Date <= '2015-01-01' & >= '2013-01-01')
which(Fruits$Date == seq('2013-01-01','2017-01-01'))
which(Fruits$Date == seq(as.Date('2013-01-01'),as.Date('2017-01-01')),by='year')
which(Fruits$Date == seq(as.Date('2013-01-01'),as.Date('2017-01-01'),by='year'))
seq(as.Date('2013-01-01'),as.Date('2017-01-01'),by='year')
Fruits$Date
which(Fruits$Date == c(seq(as.Date('2013-01-01'),as.Date('2017-01-01'),by='year')))
which(Fruits$Date <= '2016-01-01' & Fruits$Date >= '2013-01-01')
which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')
Fruits$Date[,which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
Fruits$Date[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01'),]
Fruits$Date[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
Fruits2 <- Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
aggregate(Sales ~ Location, Fruits2, sum)
class(Fruits$Date)
setwd("D:/limworkspace/R_lecture/Part3")
getwd()
