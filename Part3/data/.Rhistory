nchar("limwonki")
paste("lim","wonki",sep="-")
past2("lim","wonki")
paste2("lim","wonki")
paste0("lim","wonki")
paste("lim","wonki",sep="-", collapse=",and")     # 문자열 붙이기
# 4.2.1 다양한 문자열 다루기 함수------------------------------------------------------------
vec1 <- "lim"
vec2 <- "wonki"
nchar(vec1)                                 # 문자열 길이 추출
paste(vec1,"he is student",sep="-", collapse=",and")     # 문자열 붙이기
paste(vec1,"he is student",collapse=",and")     # 문자열 붙이기
paste(vec1,"he is student",sep="-")     # 문자열 붙이기
paste(vec1,"he is student",collapse=",and")     # 문자열 붙이기
vec3 <- "lim ,and kim"
paste(vec3,"he is student",collapse=",and")     # 문자열 붙이기
# 4.2.1 다양한 문자열 다루기 함수------------------------------------------------------------
vec1 <- "lim"
vec2 <- "wonki"
nchar(vec1)                                 # 문자열 길이 추출
paste(vec1,"he is student",sep="-")     # 문자열 붙이기, sep(seprate) 옵션으로 구분 가능
paste(vec1,"he is student",sep=",")     # 문자열 붙이기, sep(seprate) 옵션으로 구분 가능
paste(vec1,"he is student",sep=", ")     # 문자열 붙이기, sep(seprate) 옵션으로 구분 가능
paste(c('첫','두','세'),rep('번째',3),collapse=", and")     # 문자열 붙이기
paste(c('첫','두','세'),rep('번째',3),collapse=", and ")     # 문자열 붙이기
paste(c('첫','두','세'),rep('번째',3),collapse=", ")     # 문자열 붙이기
paste0(vec1,vec2,"fighting")                             # 공백없이 문자열 붙이기
paste0(vec1,vec2)                             # 공백없이 문자열 붙이기
paste(c('첫','두','세'),rep('번째',3),collapse=", ")     # 문자열 붙이기
paste(vec1,"he is student",sep=", ")                     # 문자열 붙이기, sep(seprate) 옵션으로 구분 가능
paste(c('첫','두','세'),rep('번째',3),collapse=", ")     # 결과값이 2개 이상일 때 collapse 옵션으로 연결
paste0(vec1,vec2)                             # 공백없이 문자열 붙이기
# paste 함수 참고 :https://m.blog.naver.com/coder1252/220985161855
substr("limwonki",1,3)
substr("limwonki",3,1)                                   # 첫번째 ~ 세번째 문자열 추출
substr("limwonki",-3,-1)                                   # 첫번째 ~ 세번째 문자열 추출
strsplit("lim-wonki",'-')
gsub_data <- data.frame(name = c('lim wk',"lim kk", "lim qq"))
gsub("lim","kim",gsub_data); gsub_data
gsub(lim,kim,gsub_data); gsub_data
gsub_data <- data.frame(name = c('lim wk',"lim kk", "lim qq"))
gsub("lim","kim",gsub_data); gsub_data
gsub_data <- data.frame(name = c('limwk',"limkk", "limqq"))
gsub("lim","kim",gsub_data); gsub_data
gsub_data2 <- gsub("lim","kim",gsub_data); gsub_data2
gsub_data2
gsub_data <-c('limwk',"limkk", "limqq"))
gsub_data <-c('limwk',"limkk", "limqq")
gsub_data2 <- gsub("lim","kim",gsub_data); gsub_data2
gsub_data <-c('limwk',"limkk", "limqq")                  # 찾아바꾸기 sub (단일) gsub(전체) gsub(pattern, replacement, data)
gsub_data2 <- gsub("lim","kim",gsub_data); gsub_data2    # 단 data frame 형태에서는 적용이 안됨, vector 형태에만 적용되는 듯(?)
gsub
data <-c('limwk',"limkk", "limqq")                  # 찾아바꾸기 sub (단일) gsub(전체) gsub(pattern, replacement, data)
gsub_data <- gsub("lim","kim",gsub_data); gsub_data    # 단 data frame 형태에서는 적용이 안됨, vector 형태에만 적용되는 듯(?)
grep(data,"lim")
grep("lim",data)
grep("qq",data)
grep("qq",data)                                          # grep(pattern, data) data내의 패턴의 위치를 알려줌
test.data
install.packages("plyr")
library(plyr)
# ex)
airquality
result <- ddply(subset(airquality, ozone >= 30), .(month, day), summarise, mean_temp = mean(temp)); result
str(airquality)
result <- ddply(subset(airquality, ozone >= 30), summarise, mean_temp = mean(temp)); result
ddply(airquality,"year",summarise,mena=mean(temp))
ddply(airquality,"Month",summarise,mena=mean(temp))
ddply(airquality,"Month",summarise,mena=mean(Temp))
ddply(airquality,"Month",summarise,mean=mean(Temp))
ddply(airquality,"Month",transform,mean=mean(Temp))
ddply(subset(airquality,Ozone >= 30), summarise, mean = mean(Temp))
ddply(subset(airquality,Ozone >= 30),"Month",summarise, mean = mean(Temp))
# 8.1.2 aggregate (함계, 총계) 함수 ---------------------------------------------------------------------------------------
install.packages("googleVis")
library(googleVis)
# aggregate( 계산이 될 열 ~ 기준이 될 열 , 데이터, 함수 )
str(Fruits)
aggregate(Sales ~ Year, Fruits, sum)           # Fruits 데이터의 연도[기준]별 총[함수] 판매량[계산]
aggregate(Profit ~ Year, Fruits, mean)
aggregate(Sales ~ Fruit+Location, Fruits, max) # 추가조건은 +를 사용
Fruits2 <- Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
aggregate(Sales ~ Location, Fruits2, sum)
class(Fruits$Date)
aggregate(Sales ~ Location, Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')], sum)
aggregate(Sales ~ Location, Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')], sum)
# aggregate( 계산이 될 열 ~ 기준이 될 열 , 데이터, 함수 )
str(Fruits)
Fruits$Date <- seq(as.Date("2010-01-01"),as.Date("2018-01-01"),by='year'); Fruits$Date
aggregate(Sales ~ Location, Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')], sum)
Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
Fruits2
Fruits2 <- Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')]
Fruits2
which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01')
Fruits2 <- Fruits[which(Fruits$Date >= '2013-01-01' & Fruits$Date <= '2016-01-01'),]
Fruits2
aggregate(Sales ~ Location, Fruits2, sum)
class(Fruits$Date)
Fruits
Fruits2 <- Fruits[which(Fruits$Date >= '2011-01-01' & Fruits$Date <= '2014-01-01'),]
aggregate(Sales ~ Location, Fruits2, sum)
class(Fruits$Date)
aggregate(Sales ~ Location, subset(Fruits$Date >= '2011-01-01' & Fruits$Date <= '2014-01-01'),sum)
?aggregate
subset(Fruits$Date >= '2011-01-01' & Fruits$Date <= '2014-01-01')
subset(Fruits$Date >= '2011-01-01')
aggregate(Sales ~ Location, subset(Fruits,Date >= '2011-01-01'),sum)
aggregate(Sales ~ Location, subset(Fruits, Date >= '2011-01-01' & Date <= '2014-01-01'),sum)
aggregate(Sales ~ Location, Fruits2, sum)
aggregate(Sales ~ Location, subset(Fruits, Date >= '2011-01-01' & Date <= '2014-01-01'),sum)
attach(Fruits)                                 # tapply를 사용하기 전 attach 명령이 반드시 필요함
attach(Fruits)
tapply(Sales,Date,sum)
tapply(Sales,subset(Date>='2011-01-01'),sum)
?tapply
detach(Fruits)
Fruits
aggregate(Sales ~ Location+Fruts, Fruits, var+sd)
aggregate(Sales ~ Location+Fruits, Fruits, var+sd)
aggregate(Sales ~ Location+Fruits, Fruits, list(var+sd))
aggregate(Sales ~ Location+Fruit, Fruits, list(var+sd))
aggregate(Sales ~ Location+Fruit, Fruits, var,sd)
aggregate(Sales ~ Location+Fruit, Fruits, var)
aggregate(Sales ~ Location+Fruit, Fruits, sum)
Fruits3 <- Fruits3[4:5,3] <- c("West"); Fruits3
Fruits3 <- Fruits3[4:5,3] = c("West"); Fruits3
Fruits3 <- Fruits3[4:5,3] = "West"; Fruits3
Fruits3 <- Fruits3[4:5,3] = "West"; Fruits3
Fruits3[4:5,3]
Fruits[4:5,3]
Fruits
Fruits[4:5,3]
Fruits[4:5,]
Fruits3 <- Fruits[4:5,3] = "West"; Fruits3
Fruits3 <- Fruits[4:5,3] <- "West"; Fruits3
Fruits3
Fruits[4:5,3] <- "West"
aggregate(Sales ~ Location+Fruit, Fruits, sum)
# aggregate( 계산이 될 열 ~ 기준이 될 열 , 데이터, 함수 )
str(Fruits)
Fruits
aggregate(Sales ~ Location+Fruit, Fruits, sum)
Fruits
Fruits[3,3] <-"East"
aggregate(Sales ~ Location+Fruit, Fruits, sum)
attach(Fruits)
tapply(Sales,subset(Date>='2011-01-01'& Date <= '2014-01-01'),sum)
tapply(Sales,subset(Date>='2011-01-01'& Date <= '2014-01-01'),sum)
tapply(Sales,subset(Date>='2011-01-01'),sum)
detach(Fruits)
install.packages("plyr")
library(plyr)
rm(list = ls())
list.files()
fruits <- read.csv( "fruits_10.csv" ); fruits
ddply(fruits, 'name', summarise, sum_qty = sum(qty),                    # 변수 생성
sum_price = sum(price)                 # summarise는 새로운 dfm을 생성
)                                                                 # 기준컬럼 별로 데이터 생성
fruits <- read.csv( "fruits_10.csv" ); fruits
setwd("D:/limworkspace/R_lecture/Part3/data")
fruits <- read.csv( "fruits_10.csv" ); fruits
ddply(fruits, 'name', summarise, sum_qty = sum(qty),                    # 변수 생성
sum_price = sum(price)                 # summarise는 새로운 dfm을 생성
)                                                                 # 기준컬럼 별로 데이터 생성
install.packages('dplyr')
library(dplyr)
list.files()
data1 <- read.csv("2013년_프로야구선수_성적.csv")
str(data1)
data2 <- filter(data1, 경기 > 120 ); data2
data3 <- filter(data1, 경기 > 120 & 득점 > 80); data3
data4 <- filter(data1, 포지션 == '1루수' | 포지션 == '3루수'); data4
data5 <- filter(data1, 포지션 %in% c('1루수','2루수')); data5            # %in% 포함하고 있는지 묻는 연산자
data1 %>%
group_by(팀) %>%
summarise_each(funs(mean), 경기, 타수)
Fruits_8 <- Fruits %>%
group_by(Fruit) %>%
summarise(Sales = sum(Sales),
Profit = sum(Profit)); Fruits_8
library(googleVis)
attach(Fruits)
Fruits_8 <- Fruits %>%
group_by(Fruit) %>%
summarise_each(list(sum),Sales,Profit); Fruits_8
install.packages("reshape2")
library(reshape2)
fruits <- read.csv( "fruits_10.csv" ); fruits
melt(fruits, id = c('year','name'),
variable.name = '변수명',
value.name = '변수값')
# dcast(melt된 데이터, 기준컬럼 ~ 대상컬럼, 적용함수)
dcast(mtest, year+name ~ 변수명)                                          # dcast(data, 기준컬럼 ~ 대상컬럼, 적용함수)
mtest <- melt(fruits, id = c('year','name'),
variable.name = '변수명',                                   # variable을 임의로 바꿀 수 있다
value.name = '변수값')                                      # value를 임의로 바꿀 수 있다
# dcast(melt된 데이터, 기준컬럼 ~ 대상컬럼, 적용함수)
dcast(mtest, year+name ~ 변수명)                                          # dcast(data, 기준컬럼 ~ 대상컬럼, 적용함수)
dcast(mtest, name~변수명, sum)
dcast(mtest, name~변수명, mean)
dcast(mtest, name~변수명, sum, subset=.(name=='apple'))                   # subset 옵션으로 특정 변수만 출력 가능
dcast(mtest, name~변수명, mean, sumset=.(name=='berry'))
dcast(mtest, name~변수명, sum, subset=.(name=='apple'))                   # subset 옵션으로 특정 변수만 출력 가능
dcast(mtest, name~변수명, mean, subset=.(name=='berry'))
dcast(mtest, name~변수명, sum, subset=.(name=='apple'))                   # subset 옵션으로 특정 변수만 출력 가능
install.packages("stringr")
install.packages("stringr")
library(stringr)
# 8.8.1 str_detect(data, '찾고자하는 문자') - 특정문자를 찾는 함수 ------------------------------------------------------------------------------
fruits_string <- c('apple','Apple','banana','pineapple')
str_detect(fruits_string, 'A')                                             # 대문자 A가 있는 단어 찾기 (논리값으로 출력)
str_detect(fruits_string, 'a')                                             # 소문자 a가 있는 단어 찾기 (논리값으로 출력)
str_detect(fruits_string, '^a')                                            # 첫 글자가 소문자 a인 단어 찾기 (논리값)
str_detect(fruits_string, 'e$')                                            # 끝나는 글자가 소문자 e인 단어 찾기 (논리값)
str_detect(fruits_string, '^[aA]')                                         # 시작하는 글자가 대문자 A 또는 소문자 a인 단어 찾기 (논리값)
str_detect(fruits_string, '[aA]')                                          # 단어에 소문자 a와 대문자 A가 들어 있는 단어 찾기 (논리값)
str_detect(fruits_string, regex('a', ignore_case = T))                     # 대소문자 구분을 안하도록 설정하는 함수
str_count(fruits_string, 'a')                                              # 'a'가 각각의 데이터에 몇번 포함하는지 출력
library(stringr)
# 8.8.1 str_detect(data, '찾고자하는 문자') - 특정문자를 찾는 함수 ------------------------------------------------------------------------------
fruits_string <- c('apple','Apple','banana','pineapple')
# 8.8.1 str_detect(data, '찾고자하는 문자') - 특정문자를 찾는 함수 ------------------------------------------------------------------------------
fruits_string <- c('apple','Apple','banana','pineapple')
# 8.8.8 str_split(문자열, '기준으로 나눌 문자) - 특정 문자를 기준으로 문자열을 나눠줌 -----------------------------------------------------------
fruits_string2 <- str_c('apple','/','orange','/','banana')
fruits_string2
str_split_fixed(fruits_string2,'/',3)[,2]
str_split_fixed(fruits_string2,'/',3)[,3]
str_split_fixed(fruits_string2,'/',3)[,1]
str_split_fixed(fruits_string2,'/',3)[,2]
str_split_fixed(fruits_string2,'/',3)[,1]
str_sub(fruits_string2, start=1, end=3)
str_sub(fruits_string2,1,3)
str_sub(fruits_string2, -5)                                                # 뒤에서 다섯번 째 부터 문자열을 잘라냄
for(i in seq(10,30,10)){
str_c(paste0(i,"번 학생 손드세요"))
}
for(i in seq(10,30,10)){
str_c(paste0(i,"번 학생 손드세요"))
}
for(i in seq(10,30,10)){
print(str_c(i,"번 학생 손드세요"))
}
# 1.
myf1 <- function(x){
if(x>0){ return(1) }
else{ return(0) }
}
# 1.
myf1 <- function(x){
if(x>0){ return(1) }
else{ return(0) }
}
myf1(3)
# mpg 연습문제 다시한번 풀어보기
library(ggplot2)
# mpg 연습문제 다시한번 풀어보기
library(ggplot2)
mpg
displ4down <- mpg %>% filter(displ <= 4)
mpg %>% filter(displ <= 4)
str(mpg)
# mpg 연습문제 다시한번 풀어보기
library(ggplot2)
mpg %>% filter(displ <= 4)
mpg
displ4down <- mpg %>% filter(displ <= 4)
# mpg 연습문제 다시한번 풀어보기
library(dplyr)
displ4down <- mpg %>% filter(displ <= 4)
displ5up <- mpg %>% filter(displ >= 5) %>% select(hwy) %>% mean(hwy)
mpg %>% filter(displ >= 5)
mpg %>% filter(displ >= 5) %>% select(hwy)
mpg %>% filter(displ >= 5) %>% select(hwy) %>% mean(hwy)
displ5up <- mpg %>% filter(displ >= 5) %>% summarise(mean_hwy = mean(hwy))
displ5up
displ4down <- mpg %>% filter(displ <= 4) %>% summarise(mean_hwy = mean(hwy))
displ5up <- mpg %>% filter(displ >= 5) %>% summarise(mean_hwy = mean(hwy))
displ4down; displ5up
mpg %>%
select(manufacturer, cty) %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
# 2.
mpg %>%
select(manufacturer, cty) %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
# 2.
mpg %>%
filter(manufacturer %in% c(audi,toyota)) %>%
select(manufacturer, cty) %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
# 2.
mpg %>%
filter(manufacturer %in% c('audi','toyota')) %>%
select(manufacturer, cty) %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
# 2.
mpg %>%
filter(manufacturer %in% c('audi','toyota')) %>%
#select(manufacturer, cty) %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
# 2.
mpg %>%
filter(manufacturer %in% c('audi','toyota')) %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
# 3.
mpg %>%
filter(manufacturer %in% c('chevrolet','ford','honda')) %>%
summarise(total_hwy_mean = mean(hwy))
# 4.
mpg_data <- mpg %>% select(class, cty)
# 5.
mpg_data %>%
filter(class %in% c('suv','compact')) %>%
summarise(mean_cty = mean(cty))
mpg_data %>%
filter(class %in% c('suv','compact'))
# 5.
mpg_data %>%
filter(class %in% c('suv','compact')) %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
mpg %>%
select(manufacturer, hwy) %>%
filter(manufacturer == 'audi')
mpg %>%
select(manufacturer, model, hwy) %>%
filter(manufacturer == 'audi')
# 6.
mpg %>%
select(manufacturer, model, hwy) %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy))
# 6.
mpg %>%
select(manufacturer, model, hwy) %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy)) %>%
head(5)
# 6.
mpg %>%
select(manufacturer, class, hwy) %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy)) %>%
head(5)
# 6.
mpg %>%
select(manufacturer, class, model, hwy) %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy)) %>%
head(5)
mpg %>% filter(manufacturer == 'audi') %>%
select(manufacturer,model,hwy) %>%
arrange(desc(hwy)) %>%
head(5)
mpg %>%
select(manufacturer, model, cty, hwy) %>%
mutate(합산연비변수 = cty+hwy, 평균연비변수 = 합산연비변수/2) %>%
arrange(desc(평균연비변수)) %>%
head(3)
mpg %>%
select(manufacturer, model, cty, hwy) %>%
mutate(합산연비변수 = cty+hwy, 평균연비변수 = 합산연비변수/2) %>%
arrange(desc(평균연비변수)) %>%
head(3)
# 8.
mpg %>%
select(class, cty) %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
mpg %>% select(class, cty) %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# 8.
mpg %>%
select(class, cty) %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
# 10.
mpg %>%
select(manufacturer, hwy) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
# 10.
mpg %>%
select(manufacturer, hwy) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
# 11.
mpg %>%
select(manufacturer, class)
# 11.
mpg %>%
select(manufacturer, class) %>%
group_by(manufacturer) %>%
summarise(count = n())
# 11.
mpg %>%
select(manufacturer, class) %>%
group_by(manufacturer) %>%
summarise(count = n()) %>%
arrange(desc(count))
f_plus <- function(x) {
if(x>0) {return(x)}
else {return(-x)}
}
install.packages("rJava")
library(rJava)
library(rvest)
install.packages("rvest")
install.packages("rvest")
library(rvest)
hk_url <- "http://search.hankyung.com/apps.frm/search.news?query=%EC%A0%84%EA%B8%B0%EC%9E%90%EB%8F%99%EC%B0%A8&page="
hk_urls <- NULL
for (x in 1:5){
hk_urls[x+1] <- paste(hk_url, as.character(x),sep = "",encoding="utf-8")
}
urls <- NULL
for(url in hk_urls){
html <- read_html(url)
urls <- c(urls, html %>% html_nodes(".txt_wrap") %>% html_nodes("a") %>% html_attr("href")%>% unique())
}
urls
for(url in hk_urls){
html <- read_html(url)
urls <- c(urls, html %>% html_nodes(".txt_wrap") %>% html_nodes("a") %>% html_attr("href")%>% unique())
}
hk_urls
hk_urls <- NULL
for (x in 1:5){
hk_urls[x+1] <- paste(hk_url, as.character(x),sep = "")
}
hk_urls
urls <- NULL
for(url in hk_urls){
html <- read_html(url)
urls <- c(urls, html %>% html_nodes(".txt_wrap") %>% html_nodes("a") %>% html_attr("href")%>% unique())
}
library(dplyr)
library(rvest)
library(rJava)
library(rvest)
hk_urls <- NULL
for (x in 1:5){
hk_urls[x+1] <- paste(hk_url, as.character(x),sep = "")
}
hk_urls
hk_urls[1] <- NULL
hk_urls[1]
hk_urls[1] <- NULL
hk_urls <- NULL
for (x in 0:5){
hk_urls[x+1] <- paste(hk_url, as.character(x),sep = "")
}
hk_urls
urls <- NULL
for(url in hk_urls){
html <- read_html(url)
urls <- c(urls, html %>% html_nodes(".txt_wrap") %>% html_nodes("a") %>% html_attr("href")%>% unique())
}
urls
writeLines("urls.txt")
getwd()
writeLines(urls,"urls.txt")
library(stringr)
raw_urls <- str_detect(urls, 'article'); raw_urls
raw_urls <- urls[str_detect(urls, 'article')]; raw_urls
raw_urls <- urls[str_detect(urls, 'economy/article']; raw_urls
raw_urls <- urls[str_detect(urls, 'economy/article')]; raw_urls
class(urls)
mode(urls)
data2 <- read.csv("1-4호선승하차승객수.csv"); str(data2)
data2
data2[which(nchar(data2[,2])==3),2] <- paste0(0,data2[which(nchar(data2[,2])==3),2]); data2
data2[which(nchar(data2[,2])==3),2]
data2 <- read.csv("1-4호선승하차승객수.csv"); str(data2)
data2[which(nchar(data2[,2])==3),2]
data2[which(nchar(data2[,2])==3),2] <- paste0(0,data2[which(nchar(data2[,2])==3),2]); data2
data2[nchar(data2[,2]==3),2]
data2[nchar(data2[,2])==3,2]
nchar(data2[,2])==3
data2[which(nchar(data2[,2])==3),2]
data2 <- read.csv("1-4호선승하차승객수.csv"); str(data2)
data2[which(nchar(data2[,2])==3),2]
data2[nchar(data2[,2])==3,2]
data2[which(nchar(data2[,2])==3),2]
data2 <- read.csv("1-4호선승하차승객수.csv"); str(data2)
data2[which(nchar(data2[,2])==3),2]
which(nchar(data2[,2])==3)
data2[nchar(data2[,2])==3]$시간
data2[nchar(data2[,2])==3,]$시간)
data2[nchar(data2[,2])==3,]$시간
data2[nchar(data2$시간)==3,]
data2[nchar(data2$시간)==3,]
data2[nchar(data2$시간)==3,]
data2 <- read.csv("1-4호선승하차승객수.csv"); str(data2)
data2[nchar(data2$시간)==3,]
data2[nchar(data2$시간)==3,]$시간
data2[nchar(data2$시간)==3,2]
data2[nchar(data2$시간)==3,2] <- paste0(0,data2[nchar(data2$시간)==3,2]); data2
